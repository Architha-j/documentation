openapi: 3.0.3
info:
  title: Yellow.ai APIs
  version: '1.0'
  description: |
   ## API Documentation: Yellow.ai

   Welcome to the API documentation for Yellow.ai! This comprehensive guide will walk you through the powerful RESTful API provided by Yellow.ai. With our API, you can seamlessly create and manage user data, retrieve user details, update user information, and unlock a host of other functionalities. Our API is designed to offer flexibility and simplicity, while prioritizing the security and integrity of your user data.

   ## Overview

   Yellow.ai offers a robust RESTful API that empowers you to manage user data, user events, outbound notifications, email ticketing, and more. Our API is designed to provide a seamless experience, offering flexibility and simplicity in its usage. We prioritize the security and integrity of your user data, ensuring that it remains protected throughout your interactions with our API. Leverage our powerful API to streamline your workflows and enhance your user management capabilities.

    ## Authentication
    Yellow.ai APIs support OAuth for authentication. To generate an authentication token, follow these steps:

    1. Ensure that you have super admin privileges for the bot.
    2. Access the Yellow.ai platform and navigate to the bot for which you want to generate the authentication token.
    3. In the bot settings or administration section, locate the option for generating an authentication token. The exact location may vary depending on the Yellow.ai platform version you are using.
    4. Click on the "Generate Token" or similar button to initiate the token generation process.
    5. You may be prompted to provide additional information or permissions for the token generation. Follow the on-screen instructions and provide the necessary details.
    6. Once the process is complete, the Yellow.ai platform will generate an authentication token for you.
    7. Safely store the authentication token as it will be required for making authenticated API requests to Yellow.ai APIs.
    8. Include the authentication token in the request headers of your API calls. Typically, you would add an `Authorization` header with the value "Bearer <authentication_token>".
    9. Please note that the generated authentication token provides access to the APIs based on the permissions and privileges associated with your super admin account. Handle the token with caution.





servers:
  - url: 'https://cloud.yellow.ai'
    description: India
  - url: 'https://r1.cloud.yellow.ai'
    description: MEA
  - url: 'https://r2.cloud.yellow.ai/cdp/api/v1'
    description: Indonasia
  - url: 'https://r3.cloud.yellow.ai'
    description: Singapore
  - url: 'https://r4.cloud.yellow.ai'
    description: USA
  - url: 'https://r5.cloud.yellow.ai'
    description: Europe
  - url: https://alpha5.yellowmessenger.com
    description: Alpha5
  - url: https://staging.yellowmessenger.com
    description: Staging

  
tags:
  - name: User
    description: Manage users
  - name: Event
    description: Operations about users
  - name: emailTicket
    description: Manage email tickets
  - name: ticket
    description: Manage email tickets
  - name: messages
    description: Manage bot messages

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-KEY
      description: API key to authorize requests
  headers:  
    Content-Type:
      description: Content type of the request payload
      schema:
        type: string
      example: application/json
    Accept:
      description: Acceptable response content types
      schema:
        type: string
      example: application/json
  schemas:
    UserEvent:
      type: object
      properties:
        id:
          type: string
          description: The ID of the event
        botId:
          type: string
          description: The ID of the bot
        userId:
          type: string
          description: The user's unique ID
        event:
          type: string
          description: The name of the event
        source:
          type: string
          description: The source of the event
        payload:
          type: object
          properties:
            timestamp:
              type: number
              description: The timestamp of the event
            user:
              type: object
              properties:
                city:
                  type: string
                  description: The user's city
                country:
                  type: string
                  description: The user's country code
                firstName:
                  type: string
                  description: The user's first name
                gender:
                  type: string
                  description: The user's gender
                lastName:
                  type: string
                  description: The user's last name
                profileComplete:
                  type: string
                  description: The completeness of the user's profile
                userId:
                  type: string
                  description: The user's unique ID
            createdAt:
              type: string
              format: date-time
              description: The creation timestamp of the event
            updatedAt:
              type: string
              format: date-time
              description: The last update timestamp of the event
    UserEventRequestBody:
      type: object
      properties:
        userId:
          type: string
          description: The user's unique ID
          example: "91828890000"
        eventName:
          type: string
          description: The name of the event
          example: "shopifyNewOrder"
        source:
          type: string
          description: The source of the event, pass `CUSTOM`
          example: "CUSTOM"
        userProperties:
          type: object
          properties:
            phone:
              type: string
              description: The user's phone number
              example: "918000023491"
            email:
              type: string
              description: The user's email address
              example: "tim@example.com"
        payload:
          type: object
          properties:
            firstName:
              type: string
              description: The user's first name
              example: "Tim"
    UserEventResponseBody:
      type: object
      properties:
        message:
          type: string
          description: Message indicating the response status
          example: "Event created successfully"
        data:
          type: object
          properties:
            id:
              type: string
              description: The ID of the event
            botId:
              type: string
              description: The ID of the bot
            userId:
              type: string
              description: The user's unique ID
            event:
              type: string
              description: The name of the event
            source:
              type: string
              description: The source of the event
            payload:
              type: object
              properties:
                firstName:
                  type: string
                  description: The user's first name
            createdAt:
              type: string
              format: date-time
              description: The creation timestamp of the event 

paths:
  '/cdp/api/v1/user':
    post:
      security:
        - ApiKeyAuth: []    
      tags:
        - User
      summary: Add user
      description: Creates a user record in User360.
      operationId: addUser
      parameters:
        - name: bot
          in: query
          description: The unique ID of the bot associated with the user record.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                  description: The first name of the user.
                lastName:
                  type: string
                  description: Last name of the user.
                gender:
                  type: string
                  description: Gender of the user.
                country:
                  type: string
                  description: Country of the user.
                city:
                  type: string
                  description: City of the user according to the user's address.
                language:
                  type: string
                  description: Preferred language of the user.
                email:
                  type: string
                  format: email
                  description: Email address of the user.
                phone:
                  type: string
                  description: Phone number of the user with country code.
                lastChannel:
                  type: string
                  description: Recent channel (set up on yellow.ai) where the user had an active session. You can update this property to cover touch-points/channels outside yellow.ai.
                dob:
                  type: string
                  format: date
                  description: Date of birth of the user.
                emailOptin:
                  type: boolean
                  description: Subscription status of the user to emails. Pass `true` to subscribe for emails, else pass `false`.
                smsOptin:
                  type: boolean
                  description: Subscription status of the user to SMS. Pass `true` to subscribe the user to SMS, else pass `false`.
                whatsAppOptin:
                  type: boolean
                  description: WhatsApp subscription status of the user. Pass `true` to subscribe the user to your WhatsApp notifications, else pass `false`.
                tags:
                  type: array
                  items:
                    type: string
                  description: List of groups associated with the user. You can add tags to users manually.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User created successfully"
                  data:
                    type: object
                    properties:
                      userId:
                        type: object
                        properties:
                          value:
                            type: string
                            example: "12395"
                          propertyType:
                            type: string
                            example: "System"
                      lastName:
                        type: object
                        properties:
                          value:
                            type: string
                            example: "Rohit3"
                          propertyType:
                            type: string
                            example: "System"
                      phone:
                        type: object
                        properties:
                          value:
                            type: string
                            example: "919876543211"
                          propertyType:
                            type: string
                            example: "System"
                      tags:
                        type: object
                        properties:
                          value:
                            type: array
                            items:
                              type: string
                            example:
                              - "tags2"
                          propertyType:
                            type: string
                            example: "System"
                      country:
                        type: object
                        properties:
                          value:
                            type: string
                            example: "IN"
                          propertyType:
                            type: string
                            example: "System"
                      emailOptIn:
                        type: object
                        properties:
                          value:
                            type: boolean
                            example: false
                          propertyType:
                            type: string
                            example: "System"
                      botId:
                        type: object
                        properties:
                          value:
                            type: string
                            example: ""
                        description: Unique ID of the bot associated with the user    
                      id:
                        type: object
                        properties:
                          value:
                            type: string
                            example: "x1632831689374_t4-qyVsPjufdqVfL0ugRM"
                        description: Unique internal ID genetated for the user.
                      updatedAt:
                        type: object
                        properties:
                          value:
                            type: string
                            format: date-time
                            example: "YYYY-MM-DDTHH:mm:ss.sssZ"
                          propertyType:
                            type: string
                            example: "System"
                        description: The date and time of the last update to the user record in the ISO standard format
                      createdAt:
                        type: object
                        properties:
                          value:
                            type: string
                            format: date-time
                            example: "2023-07-17T12:55:06.730Z"
                          propertyType:
                            type: string
                            example: "System"
                        description: The date and time of the record creation in ISO standard format    
                      profileComplete:
                        type: object
                        properties:
                          value:
                            type: string
                            example: "13.04"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error details
        '401':
          description: Unauthorized request or invalid `X-Auth-Token` or `botId`
        '406':
          description: Not Acceptable
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error details
  
  
    get:             
      security:
        - ApiKeyAuth: []
      tags:
        - User
      summary: Get Status of Bulk Create API
      description: Get the status of the Bulk Create API based on the unique data ID generated
      parameters:
        - name: bot
          in: query
          required: true
          description: The unique ID of the bot associated with the request.
          schema:
            type: string
        - name: id
          in: query
          required: true
          description: The unique `data` ID generated for the `/create-bulk` API
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Details Fetched Successfully"
                  data:
                    type: object
                    properties:
                      comment:
                        type: string
                        example: "finished processing"
                      result:
                        type: object
                        properties:
                          newUsers:
                            type: object
                          conflictedUsers:
                            type: object
                            additionalProperties:
                              type: string
                              description: "Key is the userId, value is the botId"       

  '/cdp/api/v1/user/{userId}':
    get:
      security:
        - ApiKeyAuth: []
      tags:
        - User
      summary: Get user details
      description: Retrieves the details of a specific user based on the userId provided.
      operationId: getUser
      parameters:
        - name: userId
          in: path
          description: The unique ID of the user.
          required: true
          schema:
            type: string
        - name: bot
          in: query
          description: The unique bot ID in which the user record is available.
          required: true
          schema:
            type: string
        - name: allProperties
          in: query
          description: Pass `true` to retrieve all user properties. By default, only a few standard properties firstName, lastName
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  contactDetails:
                    type: object
                    description: Details of the created contact
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error details
        '401':
          description: Unauthorized request or invalid `X-Auth-Token` or `botId`
        '406':
          description: Not Acceptable
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error details            
    put:
      security:
        - ApiKeyAuth: []    
      tags:
        - User
      summary: Update user
      description: Updates user properties of an existing user.
      parameters:
        - name: userId
          in: path
          description: The unique ID of the user.
          required: true
          schema:
            type: string
        - name: bot
          in: query
          description: The unique bot ID associated with the user record.
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid userId provided
        '404':
          description: User not found
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                  description: The first name of the user
                lastName:
                  type: string
                  description: The last name of the user
                phone:
                  type: string
                  description: The phone number of the user
                tags:
                  type: array
                  items:
                    type: string
                  description: An array of tags
                country:
                  type: string
                  description: The country of the user
                emailOptIn:
                  type: boolean
                  description: Indicates whether the user has opted in for email notifications
        
    delete:
      security:
        - ApiKeyAuth: []    
      tags:
        - User
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: userId
          in: path
          description: The unique ID of the user that needs to be deleted
          required: true
          schema:
            type: string
        - name: bot
          in: query
          description: The unique ID of the bot associated with the user record
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  contactDetails:
                    type: object
                    description: Details of the created contact
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error details
        '401':
          description: Unauthorized request or invalid `X-Auth-Token` or `botId`
        '406':
          description: Not Acceptable
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error details

  '/cdp/api/v1/event':
    post:
      security:
        - ApiKeyAuth: []
      tags:
        - Event    
      summary: Create new event
      description: Pushes a new event to User 360. If the userId already existsin User 360, it updates the data; if not, it creates a new user record.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserEventRequestBody'
      parameters:
        - in: query
          name: bot
          required: true
          schema:
            type: string
          description: The ID of the bot
      responses:
        '200':
          description: Event created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserEventResponseBody'
            
    get:
      security:
        - ApiKeyAuth: []
      tags:
        - Event
      summary: Get user events
      description: Retrieve events associated with a specific user.
      parameters:
        - in: query
          name: bot
          schema:
            type: string
          description: The ID of the bot
        - in: query
          name: userId
          required: true
          schema:
            type: string
          description: The unique ID of the user generated internally. This is usually in the format `{botId_userId}`
        - in: query
          name: eventName
          required: false
          schema:
            type: string
          description: The name of the event. Use this parameter to filter results by event name.
        - in: query
          name: offsetTimestamp
          required: false
          schema:
            type: string
          description: The offset timestamp (ISO format) from which to start retrieving events. Use this parameter to paginate through event results.
        - in: query
          name: limit
          required: false
          schema:
            type: integer
          description: The maximum number of events to retrieve per request. Use this parameter for result pagination and limiting the response size.          
      responses:
        '200':
          description: Successful response with a list of user events
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Message indicating the response status
                  data:
                    type: array
                    description: List of user events
                    items:
                      $ref: '#/components/schemas/UserEvent' 
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error details
        '401':
          description: Unauthorized request or invalid `X-Auth-Token` or `botId`
        '406':
          description: Not Acceptable
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error details

  '/cdp/api/v2/event/custom/properties':
    get:
      security:
        - ApiKeyAuth: []
      tags:
        - Event
      summary: Get custom event properties
      description: Retrieve all custom properties associated with events.
      parameters:
        - in: query
          name: bot
          required: true
          schema:
            type: string
          description: The unique ID of the bot
      responses:
        '200':
          description: Successful response with custom event properties
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Message indicating the response status
                  data:
                    type: object
                    properties:
                      propertyCount:
                        type: integer
                        description: Number of custom event properties
                      properties:
                        type: array
                        description: List of custom event properties
                        items:
                          type: string
                    example:
                      propertyCount: 6
                      properties:
                        - message
                        - firstName
                        - order
                        - address
                        - trackingNumber
                        - link
    
  '/cdp/api/v2/event/by-type':
    get:
      security:
        - ApiKeyAuth: []
      tags:
        - Event    
      summary: Get events by ID & name
      description: Retrieve a specific event associated with a user.
      parameters:
        - in: query
          name: bot
          required: true
          schema:
            type: string
          description: The unique ID of the bot
        - in: query
          name: id
          required: true
          schema:
            type: string
          description: The unique internal ID of the user in the format `botId_userId`
        - in: query
          name: eventName
          required: true
          schema:
            type: string
          description: The name of the event to fetch
        - in: query
          name: offsetTimestamp
          required: false
          schema:
            type: string
          description: The offset timestamp (ISO foramt) for retrieving events
        - in: query
          name: limit
          required: false
          schema:
            type: integer
          description: The maximum number of events to retrieve
      responses:
        '200':
          description: Successful response with events of the specified type
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Message indicating the response status
                  data:
                    type: array
                    description: List of events
                    items:
                      $ref: '#/components/schemas/UserEvent'

  '/data/messages':
    get:
      security:
        - ApiKeyAuth: []    
      tags: 
        - Messages
      summary: Get messages
      description: Retrieves messages for a user from the Yellow.ai platform.
      parameters:
        - name: bot
          in: query
          description: The unique ID of the bot associated with the messages.
          required: true
          schema:
            type: string
        - name: uid
          in: query
          description: The unique ID of the user associated with the messages.
          required: true
          schema:
            type: string
        - name: limit
          in: query
          description: Limit the number of messages to retrieve.
          required: false
          schema:
            type: integer
            minimum: 0
            maximum: 100
            default: 100
        - name: offset
          in: query
          description: Number of rows to skip from the top of the results table when fetching data.
          required: false
          schema:
            type: integer
            default: 0
        - name: ticketId
          in: query
          description: Get details of a specific ticket
          required: false
          schema:
            type: string
        - name: source
          in: query
          description: Get tickets from a specific source.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        _id:
                          type: string
                          description: The ID of the message
                        shouldTranslateMessage:
                          type: boolean
                          description: Indicates whether the message should be translated
                        created:
                          type: string
                          format: date-time
                          description: The creation timestamp of the message
                        updated:
                          type: string
                          format: date-time
                          description: The last update timestamp of the message
                        botId:
                          type: string
                          description: The ID of the bot associated with the message
                        uid:
                          type: string
                          description: The ID of the user associated with the message
                        message:
                          type: string
                          description: The content of the message
                        messageType:
                          type: string
                          description: Type of the user associated with the message
                          enum:
                            - AGENT
                            - BOT
                            - USER
                            - NOTIFICATION
                        sessionId:
                          type: string
                          description: The ID of the session associated with the message
                        slug:
                          type: string
                          description: The slug of the message
                        feedback:
                          type: string
                          description: The feedback associated with the message
                        source:
                          type: string
                          description: The source of the message
                        questionId:
                          type: string
                          description: The ID of the question associated with the message
                        medium:
                          type: string
                          description: The medium of the message
                        conversationId:
                          type: string
                          description: The ID of the conversation associated with the message
                        messageTags:
                          type: array
                          items:
                            type: string
                          description: An array of message tags
                        nodeType:
                          type: string
                          description: The type of the node associated with the message



  '/api/ticketing/data/send':
    post:
      security:
        - ApiKeyAuth: []    
      tags: 
        - Email Ticket
      summary: Create a new email ticket
      parameters:
        - in: query
          name: botId
          required: true
          schema:
            type: string
          description: Unique ID of the bot associated with email tickets.
        - name: x-api-key
          in: header
          required: true
          schema:
            type: string
          example: "Bearer <TOKEN>"    
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ticketData:
                  type: object
                  properties:
                    assignedTo:
                      type: string
                    botId:
                      type: string
                    contact:
                      type: object
                      properties:
                        firstName:
                          type: string
                        lastName:
                          type: string
                        primaryEmail:
                          type: string
                      required:
                        - primaryEmail
                    tags:
                      type: array
                      items:
                        type: object
                        properties:
                          tagId:
                            type: string
                    dueDate:
                      type: string
                      format: date-time
                    priority:
                      type: string
                      enum:
                        - LOW
                        - MEDIUM
                        - HIGH
                      example: MEDIUM
                    subject:
                      type: string
                    customFields:
                      type: array
                      items:
                        type: object
                        properties:
                          code:
                            type: string
                          value:
                            type: string
                    mailData:
                      type: object
                      properties:
                        sender:
                          type: object
                          properties:
                            address:
                              type: string
                        toAddresses:
                          type: array
                          items:
                            type: object
                            properties:
                              address:
                                type: string
                        bccAddresses:
                          type: array
                          items:
                            type: object
                            properties:
                              address:
                                type: string
                        ccAddresses:
                          type: array
                          items:
                            type: object
                            properties:
                              address:
                                type: string
                        subject:
                          type: string
                        message:
                          type: string
                        html:
                          type: string
              example:
                ticketData:
                  assignedTo: "agent123"
                  botId: "bot123"
                  contact:
                    firstName: "John"
                    lastName: "Doe"
                    primaryEmail: "john@example.com"
                  tags:
                    - tagId: "tag123"
                  dueDate: "2023-07-01T12:00:00Z"
                  priority: "MEDIUM"
                  subject: "Support Ticket"
                  customFields:
                    - code: "h1"
                      value: "Value 1"
                    - code: "s1"
                      value: "Value 2"
                  mailData:
                    sender:
                      address: "sender@example.com"
                    toAddresses:
                      - address: "recipient1@example.com"
                      - address: "recipient2@example.com"
                    bccAddresses:
                      - address: "bcc1@example.com"
                    ccAddresses:
                      - address: "cc1@example.com"
                    subject: "Support Ticket"
                    message: "This is a support ticket."
                    html: "<p>This is a support ticket.</p>"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  contactDetails:
                    type: object
                    description: Details of the created contact
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error details      
        '401':
          description: Unauthorized request or invalid `X-Auth-Token` or `botId`
        '406':
          description: Not Acceptable
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error details
 